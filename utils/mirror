[ ! -d "$IPTV_ROOT" ] && Println "$error 尚未安装, 请检查 !\n" && exit 1

if [[ ! -x $(command -v curl) ]] || [ ! -e "$JQ_FILE" ]
then
    DepsCheck
fi

if [ ! -e "$JQ_FILE" ] 
then
    JQInstall
fi

mkdir -p "$FFMPEG_MIRROR_ROOT/builds"
mkdir -p "$FFMPEG_MIRROR_ROOT/releases"

git_download=0
release_download=0
git_version_old=""
release_version_old=""

if [ -e "$FFMPEG_MIRROR_ROOT/index.html" ] 
then
    while IFS= read -r line
    do
        if [[ $line == *"<th>"* ]] 
        then
            if [[ $line == *"git"* ]] 
            then
                git_version_old="$line"
            else
                release_version_old="$line"
            fi
        fi
    done < "$FFMPEG_MIRROR_ROOT/index.html"
fi

if curl -s -L "https://www.johnvansickle.com/ffmpeg/index.html" -o "$FFMPEG_MIRROR_ROOT/index.html_tmp" 
then
    mv "$FFMPEG_MIRROR_ROOT/index.html_tmp" "$FFMPEG_MIRROR_ROOT/index.html"
    curl -s -L "https://www.johnvansickle.com/ffmpeg/style.css" -o "$FFMPEG_MIRROR_ROOT/style.css"
else
    Println "$error FFmpeg 查询新版本出错, 无法连接 johnvansickle.com ?"
fi

if [ -e "$FFMPEG_MIRROR_ROOT/index.html" ] 
then
    while IFS= read -r line
    do
        if [[ $line == *"<th>"* ]] 
        then
            if [[ $line == *"git"* ]] 
            then
                git_version_new="$line"
                if [ "$git_version_new" != "$git_version_old" ] || [ ! -e "$FFMPEG_MIRROR_ROOT/builds/ffmpeg-git-amd64-static.tar.xz" ]
                then
                    git_download=1
                fi
            else
                release_version_new="$line"
                [ "$release_version_new" != "$release_version_old" ] && release_download=1
            fi
        fi

        if [[ $line == *"tar.xz"* ]]  
        then
            if [[ $line == *"git"* ]] && [ "$git_download" -eq 1 ]
            then
                line=${line#*<td><a href=\"}
                git_link=${line%%\" style*}
                build_file_name=${git_link##*/}
                if [ "$git_version_new" != "$git_version_old" ] || [ ! -e "$FFMPEG_MIRROR_ROOT/builds/${build_file_name}" ]
                then
                    Println "$info 下载 $build_file_name ..."
                    if curl -s -L "$git_link" -o "$FFMPEG_MIRROR_ROOT/builds/${build_file_name}_tmp"
                    then
                        mv "$FFMPEG_MIRROR_ROOT/builds/${build_file_name}_tmp" "$FFMPEG_MIRROR_ROOT/builds/${build_file_name}"
                    else
                        Println "$error FFmpeg git build 下载出错, 无法连接 github ?"
                    fi
                fi
            else 
                if [ "$release_download" -eq 1 ] 
                then
                    line=${line#*<td><a href=\"}
                    release_link=${line%%\" style*}
                    release_file_name=${release_link##*/}
                    if [ "$release_version_new" != "$release_version_old" ] || [ ! -e "$FFMPEG_MIRROR_ROOT/releases/${release_file_name}" ]
                    then
                        Println "$info 下载 $release_file_name ..."
                        if curl -s -L "$release_link" -o "$FFMPEG_MIRROR_ROOT/releases/${release_file_name}_tmp"
                        then
                            mv "$FFMPEG_MIRROR_ROOT/releases/${release_file_name}_tmp" "$FFMPEG_MIRROR_ROOT/releases/${release_file_name}"
                        else
                            Println "$error FFmpeg release build 下载出错, 无法连接 github ?"
                        fi
                    fi
                fi
            fi
        fi
    done < "$FFMPEG_MIRROR_ROOT/index.html"

    #Println "输入镜像网站链接(比如: $FFMPEG_MIRROR_LINK)"
    #read -p "$i18n_default_cancel" FFMPEG_LINK
    #[ -z "$FFMPEG_LINK" ] && Println "$i18n_canceled...\n" && exit 1
    #sed -i "s+https://johnvansickle.com/ffmpeg/\(builds\|releases\)/\(.*\).tar.xz\"+$FFMPEG_LINK/\1/\2.tar.xz\"+g" "$FFMPEG_MIRROR_ROOT/index.html"

    sed -i "s+https://johnvansickle.com/ffmpeg/\(builds\|releases\)/\(.*\).tar.xz\"+\1/\2.tar.xz\"+g" "$FFMPEG_MIRROR_ROOT/index.html"
fi

while IFS= read -r line
do
    if [[ $line == *"latest stable release is"* ]] 
    then
        line=${line#*<a href=\"}
        poppler_name=${line%%.tar.xz*}
        poppler_name="poppler-0.81.0"
        if [ ! -e "$FFMPEG_MIRROR_ROOT/$poppler_name.tar.xz" ] 
        then
            Println "$info 下载 poppler ..."
            rm -f "$FFMPEG_MIRROR_ROOT/poppler-"*.tar.xz
            if curl -s -L "https://poppler.freedesktop.org/$poppler_name.tar.xz" -o "$FFMPEG_MIRROR_ROOT/$poppler_name.tar.xz_tmp" 
            then
                mv "$FFMPEG_MIRROR_ROOT/$poppler_name.tar.xz_tmp" "$FFMPEG_MIRROR_ROOT/$poppler_name.tar.xz"
            else
                Println "$error poppler 下载出错"
            fi
        fi
    elif [[ $line == *"poppler encoding data"* ]] 
    then
        line=${line#*<a href=\"}
        poppler_data_name=${line%%.tar.gz*}
        if [ ! -e "$FFMPEG_MIRROR_ROOT/$poppler_data_name.tar.gz" ] 
        then
            Println "$info 下载 poppler-data ..."
            rm -f "$FFMPEG_MIRROR_ROOT/poppler-data-"*.tar.gz
            if curl -s -L "https://poppler.freedesktop.org/$poppler_data_name.tar.gz" -o "$FFMPEG_MIRROR_ROOT/$poppler_data_name.tar.gz_tmp"
            then
                mv "$FFMPEG_MIRROR_ROOT/$poppler_data_name.tar.gz_tmp" "$FFMPEG_MIRROR_ROOT/$poppler_data_name.tar.gz"
            else
                Println "$error poppler-data 下载出错"
            fi
        fi
        break
    fi
done < <(curl -s -Lm 20 "https://poppler.freedesktop.org/" 2> /dev/null)

if jq_ver=$(curl -s -Lm 20 "https://api.github.com/repos/stedolan/jq/releases/latest" | $JQ_FILE -r '.tag_name')
then
    if [ ! -e "$FFMPEG_MIRROR_ROOT/$jq_ver/jq-linux64" ] || [ ! -e "$FFMPEG_MIRROR_ROOT/$jq_ver/jq-linux32" ] 
    then
        Println "$info 下载 jq ..."
        rm -f "$FFMPEG_MIRROR_ROOT/jq-"*
        mkdir -p "$FFMPEG_MIRROR_ROOT/$jq_ver/"
        if curl -s -L "https://github.com/stedolan/jq/releases/download/$jq_ver/jq-linux64" -o "$FFMPEG_MIRROR_ROOT/$jq_ver/jq-linux64_tmp" && curl -s -L "https://github.com/stedolan/jq/releases/download/$jq_ver/jq-linux32" -o "$FFMPEG_MIRROR_ROOT/$jq_ver/jq-linux32_tmp"
        then
            mv "$FFMPEG_MIRROR_ROOT/$jq_ver/jq-linux64_tmp" "$FFMPEG_MIRROR_ROOT/$jq_ver/jq-linux64"
            mv "$FFMPEG_MIRROR_ROOT/$jq_ver/jq-linux32_tmp" "$FFMPEG_MIRROR_ROOT/$jq_ver/jq-linux32"
        else
            Println "$error jq 下载出错, 无法连接 github ?"
        fi
    fi
else
    Println "$error jq 下载出错, 无法连接 github ?"
fi

archs=( 32 64 arm32-v5 arm32-v6 arm32-v7a arm64-v8a s390x)

if v2ray_ver=$(curl -s -m 30 "https://api.github.com/repos/v2fly/v2ray-core/releases/latest" | $JQ_FILE -r '.tag_name') 
then
    mkdir -p "$FFMPEG_MIRROR_ROOT/v2ray/$v2ray_ver/"
    for arch in "${archs[@]}"
    do
        if [ ! -e "$FFMPEG_MIRROR_ROOT/v2ray/$v2ray_ver/v2ray-linux-$arch.zip" ] 
        then
            Println "$info 下载 v2ray-linux-$arch $v2ray_ver ..."
            if curl -s -L "https://github.com/v2fly/v2ray-core/releases/download/$v2ray_ver/v2ray-linux-$arch.zip" -o "$FFMPEG_MIRROR_ROOT/v2ray/$v2ray_ver/v2ray-linux-$arch.zip_tmp" \
            && curl -s -L "https://github.com/v2fly/v2ray-core/releases/download/$v2ray_ver/v2ray-linux-$arch.zip.dgst" -o "$FFMPEG_MIRROR_ROOT/v2ray/$v2ray_ver/v2ray-linux-$arch.zip.dgst_tmp" 
            then
                mv "$FFMPEG_MIRROR_ROOT/v2ray/$v2ray_ver/v2ray-linux-$arch.zip_tmp" "$FFMPEG_MIRROR_ROOT/v2ray/$v2ray_ver/v2ray-linux-$arch.zip"
                mv "$FFMPEG_MIRROR_ROOT/v2ray/$v2ray_ver/v2ray-linux-$arch.zip.dgst_tmp" "$FFMPEG_MIRROR_ROOT/v2ray/$v2ray_ver/v2ray-linux-$arch.zip.dgst"
            else
                Println "$error v2ray-linux-$arch $v2ray_ver 下载出错, 无法连接 github ?"
            fi
        fi
    done
else
    Println "$error v2ray $v2ray_ver 下载出错, 无法连接 github ?"
fi

if xray_ver=$(curl -s -m 30 "https://api.github.com/repos/XTLS/Xray-core/releases/latest" | $JQ_FILE -r '.tag_name') 
then
    mkdir -p "$FFMPEG_MIRROR_ROOT/xray/$xray_ver/"
    for arch in "${archs[@]}"
    do
        if [ ! -e "$FFMPEG_MIRROR_ROOT/xray/$xray_ver/Xray-linux-$arch.zip" ] 
        then
            Println "$info 下载 Xray-linux-$arch $xray_ver ..."
            if curl -s -L "https://github.com/XTLS/Xray-core/releases/download/$xray_ver/Xray-linux-$arch.zip" -o "$FFMPEG_MIRROR_ROOT/xray/$xray_ver/Xray-linux-$arch.zip_tmp" \
            && curl -s -L "https://github.com/XTLS/Xray-core/releases/download/$xray_ver/Xray-linux-$arch.zip.dgst" -o "$FFMPEG_MIRROR_ROOT/xray/$xray_ver/Xray-linux-$arch.zip.dgst_tmp" 
            then
                mv "$FFMPEG_MIRROR_ROOT/xray/$xray_ver/Xray-linux-$arch.zip_tmp" "$FFMPEG_MIRROR_ROOT/xray/$xray_ver/Xray-linux-$arch.zip"
                mv "$FFMPEG_MIRROR_ROOT/xray/$xray_ver/Xray-linux-$arch.zip.dgst_tmp" "$FFMPEG_MIRROR_ROOT/xray/$xray_ver/Xray-linux-$arch.zip.dgst"
            else
                Println "$error Xray-linux-$arch $xray_ver 下载出错, 无法连接 github ?"
            fi
        fi
    done
else
    Println "$error xray $xray_ver 下载出错, 无法连接 github ?"
fi

if xray_ver=$(curl -s -m 30 "https://api.github.com/repos/woniuzfb/openwrt-xray/releases/latest" | $JQ_FILE -r '.tag_name') 
then
    xray_ver=${xray_ver#*v}
    if [[ ! $xray_ver =~ - ]] 
    then
        xray_package_ver="${xray_ver}-1"
    else
        xray_package_ver="$xray_ver"
    fi
    xray_archs=( 'x86_64' 'aarch64_generic' 'aarch64_cortex-a53' )
    for arch in "${xray_archs[@]}"
    do
        if [ ! -e "$FFMPEG_MIRROR_ROOT/xray_${xray_package_ver}_$arch.ipk" ] 
        then
            Println "$info 下载 xray_${xray_package_ver}_$arch.ipk ..."
            if curl -s -L "https://github.com/woniuzfb/openwrt-xray/releases/download/v$xray_ver/xray_${xray_package_ver}_$arch.ipk" -o "$FFMPEG_MIRROR_ROOT/xray_${xray_package_ver}_$arch.ipk_tmp"
            then
                mv "$FFMPEG_MIRROR_ROOT/xray_${xray_package_ver}_$arch.ipk_tmp" "$FFMPEG_MIRROR_ROOT/xray_${xray_package_ver}_$arch.ipk"
            else
                Println "$error xray_${xray_package_ver}_$arch.ipk 下载出错, 无法连接 github ?"
            fi
        fi
    done
else
    Println "$error openwrt-xray 下载出错, 无法连接 github ?"
fi

IFS=" " read -r luci_app_xray_ver xray_i18n_name < <(curl -s -m 30 "https://api.github.com/repos/woniuzfb/luci-app-xray/releases/latest" | $JQ_FILE -r '[.tag_name,.assets[1].name]|join(" ")')
if [ -n "${luci_app_xray_ver:-}" ]
then
    luci_app_xray_ver=${luci_app_xray_ver#*v}
    Println "$info 下载 luci-app-v2ray_${luci_app_xray_ver}_all.ipk ..."
    if curl -s -L "https://github.com/woniuzfb/luci-app-xray/releases/download/v$luci_app_xray_ver/luci-app-v2ray_${luci_app_xray_ver%-*}_all.ipk" -o "$FFMPEG_MIRROR_ROOT/luci-app-v2ray_${luci_app_xray_ver}_all.ipk_tmp"
    then
        mv "$FFMPEG_MIRROR_ROOT/luci-app-v2ray_${luci_app_xray_ver}_all.ipk_tmp" "$FFMPEG_MIRROR_ROOT/luci-app-v2ray_${luci_app_xray_ver}_all.ipk"
    else
        Println "$error luci-app-v2ray_${luci_app_xray_ver}_all.ipk 下载出错, 无法连接 github ?"
    fi
    Println "$info 下载 $xray_i18n_name ..."
    if curl -s -L "https://github.com/woniuzfb/luci-app-xray/releases/download/v$luci_app_xray_ver/$xray_i18n_name" -o "$FFMPEG_MIRROR_ROOT/${xray_i18n_name}_tmp"
    then
        mv "$FFMPEG_MIRROR_ROOT/${xray_i18n_name}_tmp" "$FFMPEG_MIRROR_ROOT/luci-i18n-v2ray-zh-cn_${luci_app_xray_ver}_all.ipk"
    else
        Println "$error $xray_i18n_name 下载出错, 无法连接 github ?"
    fi
else
    Println "$error luci-app-xray 下载出错, 无法连接 github ?"
fi

if dnscrypt_ver=$(curl -s -m 30 "https://api.github.com/repos/DNSCrypt/dnscrypt-proxy/releases/latest" | $JQ_FILE -r '.tag_name') 
then
    archs=( arm arm64 i386 x86_64 )

    for arch in "${archs[@]}"
    do
        if [ ! -e "$FFMPEG_MIRROR_ROOT/dnscrypt/dnscrypt-proxy-linux_$arch-$dnscrypt_ver.tar.gz" ]
        then
            Println "$info 下载 dnscrypt proxy $arch ..."
            mkdir -p "$FFMPEG_MIRROR_ROOT/dnscrypt/"
            if curl -s -L "https://github.com/DNSCrypt/dnscrypt-proxy/releases/download/$dnscrypt_ver/dnscrypt-proxy-linux_$arch-$dnscrypt_ver.tar.gz" -o "$FFMPEG_MIRROR_ROOT/dnscrypt/dnscrypt-proxy-linux_$arch-$dnscrypt_ver.tar.gz_tmp"
            then
                mv "$FFMPEG_MIRROR_ROOT/dnscrypt/dnscrypt-proxy-linux_$arch-$dnscrypt_ver.tar.gz_tmp" "$FFMPEG_MIRROR_ROOT/dnscrypt/dnscrypt-proxy-linux_$arch-$dnscrypt_ver.tar.gz"
            else
                Println "$error dnscrypt $arch 下载出错, 无法连接 github ?"
            fi
        fi
    done
else
    Println "$error dnscrypt 下载出错, 无法连接 github ?"
fi

Println "$info 下载 nginx-http-flv-module ..."
if curl -s -L "https://github.com/winshining/nginx-http-flv-module/archive/master.zip" -o "$FFMPEG_MIRROR_ROOT/nginx-http-flv-module.zip_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/nginx-http-flv-module.zip_tmp" "$FFMPEG_MIRROR_ROOT/nginx-http-flv-module.zip"
else
    Println "$error nginx-http-flv-module 下载出错, 无法连接 github ?"
fi

Println "$info 下载 imgcat ..."
if curl -s -L "https://github.com/eddieantonio/imgcat/archive/master.zip" -o "$FFMPEG_MIRROR_ROOT/imgcat.zip_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/imgcat.zip_tmp" "$FFMPEG_MIRROR_ROOT/imgcat.zip"
else
    Println "$error imgcat 下载出错, 无法连接 github ?"
fi

Println "$info 下载 CImg ..."
if curl -s -L "https://github.com/dtschump/CImg/archive/master.zip" -o "$FFMPEG_MIRROR_ROOT/CImg.zip_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/CImg.zip_tmp" "$FFMPEG_MIRROR_ROOT/CImg.zip"
else
    Println "$error CImg 下载出错, 无法连接 github ?"
fi

if curl -s -L "https://api.github.com/repos/stedolan/jq/releases/latest" -o "$FFMPEG_MIRROR_ROOT/jq.json_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/jq.json_tmp" "$FFMPEG_MIRROR_ROOT/jq.json"
else
    Println "$error jq.json 下载出错, 无法连接 github ?"
fi

if curl -s -L "https://api.github.com/repos/v2fly/v2ray-core/releases/latest" -o "$FFMPEG_MIRROR_ROOT/v2ray.json_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/v2ray.json_tmp" "$FFMPEG_MIRROR_ROOT/v2ray.json"
else
    Println "$error v2ray.json 下载出错, 无法连接 github ?"
fi

if curl -s -L "https://api.github.com/repos/XTLS/Xray-core/releases/latest" -o "$FFMPEG_MIRROR_ROOT/xray.json_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/xray.json_tmp" "$FFMPEG_MIRROR_ROOT/xray.json"
else
    Println "$error xray.json 下载出错, 无法连接 github ?"
fi

if curl -s -L "https://api.github.com/repos/woniuzfb/openwrt-xray/releases/latest" -o "$FFMPEG_MIRROR_ROOT/openwrt-xray.json_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/openwrt-xray.json_tmp" "$FFMPEG_MIRROR_ROOT/openwrt-xray.json"
else
    Println "$error openwrt-xray.json 下载出错, 无法连接 github ?"
fi

if curl -s -L "https://api.github.com/repos/woniuzfb/luci-app-xray/releases/latest" -o "$FFMPEG_MIRROR_ROOT/luci-app-xray.json_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/luci-app-xray.json_tmp" "$FFMPEG_MIRROR_ROOT/luci-app-xray.json"
else
    Println "$error luci-app-xray.json 下载出错, 无法连接 github ?"
fi

if curl -s -L "https://api.github.com/repos/DNSCrypt/dnscrypt-proxy/releases/latest" -o "$FFMPEG_MIRROR_ROOT/dnscrypt.json_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/dnscrypt.json_tmp" "$FFMPEG_MIRROR_ROOT/dnscrypt.json"
else
    Println "$error dnscrypt.json 下载出错, 无法连接 github ?"
fi

if curl -s -L "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" -o "$FFMPEG_MIRROR_ROOT/vim-plug.vim_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/vim-plug.vim_tmp" "$FFMPEG_MIRROR_ROOT/vim-plug.vim"
else
    Println "$error vim-plug.vim 下载出错, 无法连接 github ?"
fi

if [ ! -e "$FFMPEG_MIRROR_ROOT/openssl-1.1.1f-sess_set_get_cb_yield.patch" ]
then
    if curl -s -L "https://raw.githubusercontent.com/openresty/openresty/master/patches/openssl-1.1.1f-sess_set_get_cb_yield.patch" -o "$FFMPEG_MIRROR_ROOT/openssl-1.1.1f-sess_set_get_cb_yield.patch_tmp"
    then
        mv "$FFMPEG_MIRROR_ROOT/openssl-1.1.1f-sess_set_get_cb_yield.patch_tmp" "$FFMPEG_MIRROR_ROOT/openssl-1.1.1f-sess_set_get_cb_yield.patch"
    else
        Println "$error openssl patch 下载出错, 无法连接 github ?"
    fi
fi

if [ ! -e "$FFMPEG_MIRROR_ROOT/Add-SVT-HEVC-support-for-RTMP-and-HLS-on-Nginx-HTTP-FLV.patch" ] 
then
    if curl -s -L "https://raw.githubusercontent.com/woniuzfb/iptv/master/scripts/Add-SVT-HEVC-support-for-RTMP-and-HLS-on-Nginx-HTTP-FLV.patch" -o "$FFMPEG_MIRROR_ROOT/Add-SVT-HEVC-support-for-RTMP-and-HLS-on-Nginx-HTTP-FLV.patch_tmp"
    then
        mv "$FFMPEG_MIRROR_ROOT/Add-SVT-HEVC-support-for-RTMP-and-HLS-on-Nginx-HTTP-FLV.patch_tmp" "$FFMPEG_MIRROR_ROOT/Add-SVT-HEVC-support-for-RTMP-and-HLS-on-Nginx-HTTP-FLV.patch"
    else
        Println "$error Add-SVT-HEVC-support-for-RTMP-and-HLS-on-Nginx-HTTP-FLV.patch 下载出错, 无法连接 github ?"
    fi
fi

if curl -s -L "https://raw.githubusercontent.com/woniuzfb/iptv/master/scripts/Add-SVT-HEVC-FLV-support-on-FFmpeg-git.patch" -o "$FFMPEG_MIRROR_ROOT/Add-SVT-HEVC-FLV-support-on-FFmpeg-git.patch_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/Add-SVT-HEVC-FLV-support-on-FFmpeg-git.patch_tmp" "$FFMPEG_MIRROR_ROOT/Add-SVT-HEVC-FLV-support-on-FFmpeg-git.patch"
else
    Println "$error Add-SVT-HEVC-FLV-support-on-FFmpeg-git.patch 下载出错, 无法连接 github ?"
fi

if curl -s -L "https://raw.githubusercontent.com/woniuzfb/iptv/master/scripts/fix_ngx_lua_resp_get_headers_key_whitespace.patch" -o "$FFMPEG_MIRROR_ROOT/fix_ngx_lua_resp_get_headers_key_whitespace.patch_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/fix_ngx_lua_resp_get_headers_key_whitespace.patch_tmp" "$FFMPEG_MIRROR_ROOT/fix_ngx_lua_resp_get_headers_key_whitespace.patch"
else
    Println "$error fix_ngx_lua_resp_get_headers_key_whitespace.patch 下载出错, 无法连接 github ?"
fi

if [ ! -e "$FFMPEG_MIRROR_ROOT/fontforge-20190413.tar.gz" ] 
then
    if curl -s -L "https://github.com/fontforge/fontforge/releases/download/20190413/fontforge-20190413.tar.gz" -o "$FFMPEG_MIRROR_ROOT/fontforge-20190413.tar.gz_tmp"
    then
        mv "$FFMPEG_MIRROR_ROOT/fontforge-20190413.tar.gz_tmp" "$FFMPEG_MIRROR_ROOT/fontforge-20190413.tar.gz"
    else
        Println "$error fontforge 下载出错, 无法连接 github ?"
    fi
fi

if [ ! -e "$FFMPEG_MIRROR_ROOT/pdf2htmlEX-0.18.7-poppler-0.81.0.zip" ] 
then
    Println "$info 下载 pdf2htmlEX ..."
    if curl -s -L "https://github.com/pdf2htmlEX/pdf2htmlEX/archive/v0.18.7-poppler-0.81.0.zip" -o "$FFMPEG_MIRROR_ROOT/pdf2htmlEX-0.18.7-poppler-0.81.0.zip_tmp"
    then
        mv "$FFMPEG_MIRROR_ROOT/pdf2htmlEX-0.18.7-poppler-0.81.0.zip_tmp" "$FFMPEG_MIRROR_ROOT/pdf2htmlEX-0.18.7-poppler-0.81.0.zip"
    else
        Println "$error pdf2htmlEX 下载出错, 无法连接 github ?"
    fi
fi

if [ ! -e "$FFMPEG_MIRROR_ROOT/nbfc.zip" ] 
then
    Println "$info 下载 nbfc ..."
    if curl -s -L "https://github.com/hirschmann/nbfc/archive/master.zip" -o "$FFMPEG_MIRROR_ROOT/nbfc.zip_tmp"
    then
        mv "$FFMPEG_MIRROR_ROOT/nbfc.zip_tmp" "$FFMPEG_MIRROR_ROOT/nbfc.zip"
    else
        Println "$error nbfc 下载出错, 无法连接 github ?"
    fi
fi

Println "$info 下载 v2ray install-release.sh ..."
if curl -s -L "$V2_LINK" -o "$FFMPEG_MIRROR_ROOT/v2ray_install-release.sh_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/v2ray_install-release.sh_tmp" "$FFMPEG_MIRROR_ROOT/v2ray_install-release.sh"
else
    Println "$error v2ray install-release.sh 下载出错, 无法连接 github ?"
fi

Println "$info 下载 acme.sh ..."
if curl -s -L https://get.acme.sh -o "$FFMPEG_MIRROR_ROOT/acme.sh_tmp"
then
    mv "$FFMPEG_MIRROR_ROOT/acme.sh_tmp" "$FFMPEG_MIRROR_ROOT/acme.sh"
else
    Println "$error acme.sh 下载出错, 无法连接 github ?"
fi

locale_options=( en )
mkdir -p "$FFMPEG_MIRROR_ROOT/locale/po/"

for locale in "${locale_options[@]}"
do
    Println "$info 下载 $locale 语言文件 ..."
    if curl -s -L "https://raw.githubusercontent.com/woniuzfb/iptv/master/i18n/po/iptv.sh-$locale.mo" -o "$FFMPEG_MIRROR_ROOT/locale/po/iptv.sh-$locale.mo_tmp"
    then
        mv "$FFMPEG_MIRROR_ROOT/locale/po/iptv.sh-$locale.mo_tmp" "$FFMPEG_MIRROR_ROOT/locale/po/iptv.sh-$locale.mo"
    else
        Println "$error iptv.sh-$locale.mo 下载出错, 无法连接 github ?"
    fi
done

exit 0
