NodejsConfig()
{
    echo
    nodejs_options=( '域名' '本地' )
    inquirer list_input "选择使用 nodejs 的对象" nodejs_options nodejs_option

    if [ "$nodejs_option" == "域名" ] 
    then
        NginxListDomain
        NginxSelectDomainServer

        server_name=${nginx_domain_servers_name[nginx_domain_servers_index]}

        if [[ $server_name =~ , ]] 
        then
            IFS="," read -r -a domains <<< "$server_name"

            echo
            inquirer list_input "选择域名: " domains server_name
        fi
    else
        NginxListLocalhost
        NginxSelectLocalhostServer
    fi

    NginxConfigServerLiveRoot

    updated=0

    NginxAddFlv

    NginxAddNodejs

    if [ "$updated" -eq 1 ] 
    then
        NginxBuildConf parse_out
        Println "$info nodejs 配置添加成功"
    fi

    if [ "$nodejs_option" == "域名" ] 
    then
        NginxCheckLocalhost
        NginxAddHttp
    fi

    updated=0

    NginxAddCorsHost

    NginxAddSameSiteNone

    nodejs_port=$(GetFreePort)

    NginxAddUpstreamNodejs

    if [ "$updated" -eq 1 ] 
    then
        NginxBuildConf parse_out
    fi

    username=$(RandStr)
    password=$(RandStr)

    if [[ $(ps --no-headers -o comm 1) == "systemd" ]] 
    then
        mongo admin --eval "db.getSiblingDB('admin').createUser({user: '${username}', pwd: '${password}', roles: ['root']})"
        systemctl restart mongod
    else
        mongo admin --eval "db.getSiblingDB('admin').createUser({user: '${username}', pwd: '${password}', roles: ['root']})"
        service mongod restart
    fi

    mkdir -p "$NODE_ROOT"
    echo "
const express = require('express');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const mongoose = require('mongoose');
const path = require('path');

const app = express();
const port = $nodejs_port;

const clientP = mongoose.connect(
    'mongodb://$username:$password@127.0.0.1/admin',
    { useNewUrlParser: true, useUnifiedTopology: true }
).then(m => m.connection.getClient())

app.set('trust proxy', 1);
app.use(session({
    name: '$(RandStr)',
    secret: '$(RandStr)',
    resave: false,
    saveUninitialized: false,
    store: MongoStore.create({
        clientPromise: clientP,
        dbName: 'encrypt',
        stringify: false,
        collectionName: 'sessions',
        autoRemove: 'interval',
        autoRemoveInterval: 120
    }),
    cookie: {
        domain: 'localhost',
        maxAge: 60 * 60 * 2000,
        httpOnly: true
    }
}));

app.get('/keys', (req, res) => {
    const { key, channel } = req.query;
    if (!req.session.websiteUser || !key || !channel){
        res.status(400).end();
    } esle {
        res.sendFile(channel + '/' + key + '.key', {root: path.join(__dirname, '../${LIVE_ROOT##*/}')});
    }
});

app.get('/', (req, res) => {
    req.session.websiteUser = true;
    res.sendFile('$server_root/index.html');
});

app.get('/remote', (req, res) => {
    req.session.websiteUser = true;
    res.sendFile('$server_root/channels.json');
});

app.get('/channels', (req, res) => {
    if (!req.session.websiteUser){
        res.status(403).end();
    } else {
        res.sendFile('$server_root/channels.json');
    }
});

app.listen(port, () => console.log(\`App listening on port \${port}!\`))

" > "$NODE_ROOT/index.js"

    $JQ_FILE -n \
'{
  "name": "node",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node index.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.17.1",
    "express-session": "^1.17.0",
    "mongodb": "^4.1.2",
    "connect-mongo": "^4.6.0",
    "mongoose": "^6.0.8",
    "path": "^0.12.7"
  }
}' > "$NODE_ROOT/package.json"

    if [[ ! -x $(command -v git) ]] 
    then
        Spinner "安装 git" GitInstall
    fi

    cd "$NODE_ROOT"
    npm install
    npm install -g pm2
    pm2 start "$NODE_ROOT/index.js"
    pm2 startup
    Println "$info nodejs 配置完成"
}
