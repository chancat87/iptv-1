NginxConfigLocalhost()
{
    echo
    config_localhost_options=( '修改指令' '添加 flv 设置' '添加 nodejs 设置' '添加 SNI 域名分流' '添加 SSL 协议分流' '添加 ALPN 协议分流' '添加 分流后端' '删除 SNI 域名分流' '删除 SSL 协议分流' '删除 ALPN 协议分流' '删除 分流后端' '取消' )
    inquirer list_input_index "选择操作" config_localhost_options config_localhost_options_index

    if [ "$config_localhost_options_index" -eq 0 ] 
    then
        NginxCheckLocalhost
        NginxConfigDirective level_1
    elif [ "$config_localhost_options_index" -eq 1 ] 
    then
        NginxListLocalhost
        NginxSelectLocalhostServer
        updated=0
        NginxAddFlv
        if [ "$updated" -eq 1 ] 
        then
            NginxBuildConf parse_out
        fi
        Println "$info flv 配置添加成功\n"
    elif [ "$config_localhost_options_index" -eq 2 ] 
    then
        if [ ! -s "$NODE_ROOT/index.js" ] 
        then
            Println "$error 请先安装 nodejs\n"
            exit 1
        fi
        NginxListLocalhost
        NginxSelectLocalhostServer
        updated=0
        NginxAddNodejs
        if [ "$updated" -eq 1 ] 
        then
            NginxBuildConf parse_out
        fi
        Println "$info nodejs 配置添加成功\n"
    elif [ "$config_localhost_options_index" -eq 11 ]
    then
        Println "$i18n_canceled...\n"
    else
        NginxCheckLocalhost
        NginxGetStream

        if [ "$nginx_stream_server_name_count" -eq 0 ] 
        then
            echo
            inquirer list_input "是否启用分流" ny_options yn_option
            if [ "$yn_option" == "$i18n_no" ] 
            then
                Println "$i18n_canceled...\n"
                exit 1
            fi
            echo
            inquirer text_input "输入默认分流后端地址: " upstream_localhost_server "127.0.0.1:8884"
        fi

        updated=0
        NginxAddStream

        if [ "$updated" -eq 1 ] 
        then
            NginxGetStream
            updated=0
        fi

        case $config_localhost_options_index in
            3) 
                Println "SNI 域名分流:\n\n${nginx_stream_server_name_list:-无}\n\n"
                ExitOnText "输入指令(分流域名)" server_name_directive

                echo
                inquirer text_input "输入指令值(分流后端名称)" server_name_args "$server_name_directive"

                directive_map='{"directive":"map","args":["$ssl_preread_server_name","$upstream"],"block":[]}'

                directives=( map )
                directives_val=()
                check_directives=()
                check_args=( '["$ssl_preread_server_name","$upstream"]' )

                NginxAddDirective 2

                directive_server_name='{"directive":"'"$server_name_directive"'","args":["'"$server_name_args"'"]}'

                directives=( "$server_name_directive" )
                directives_val=( server_name )
                check_directives=()
                check_args=()

                NginxAddDirective 3

                if [ "$updated" -eq 1 ] 
                then
                    NginxBuildConf parse_out
                fi
                Println "$info SNI 域名分流添加成功\n"
            ;;
            4) 
                Println "SSL 协议分流:\n\n${nginx_stream_protocol_list:-无}\n"
                Println "$tip 空字符用 '' 表示"
                ExitOnText "输入指令(分流 SSL 协议)" protocol_directive

                if [ "$protocol_directive" == "''" ] 
                then
                    protocol_directive=""
                fi

                echo
                ExitOnText "输入指令值(分流后端名称)" protocol_args

                directive_map='{"directive":"map","args":["$ssl_preread_protocol","$ssl_proxy"],"block":[]}'

                directives=( map )
                directives_val=()
                check_directives=()
                check_args=( '["$ssl_preread_protocol","$ssl_proxy"]' )

                NginxAddDirective 2

                directive_protocol='{"directive":"'"$protocol_directive"'","args":["'"$protocol_args"'"]}'

                directives=( "$protocol_directive" )
                directives_val=( protocol )
                check_directives=()
                check_args=()

                NginxAddDirective 3

                if [ "$updated" -eq 1 ] 
                then
                    NginxBuildConf parse_out
                fi
                Println "$info SSL 协议分流添加成功\n"
            ;;
            5) 
                Println "ALPN 协议分流:\n\n${nginx_stream_alpn_protocols_list:-无}\n\n"
                ExitOnText "输入指令(分流 ALPN 协议)" alpn_protocols_directive

                alpn_protocols_directive=${alpn_protocols_directive//\\/\\\\}

                echo
                ExitOnText "输入指令值(分流后端名称)" alpn_protocols_args

                directive_map='{"directive":"map","args":["$ssl_preread_alpn_protocols","$proxy_pass"],"block":[]}'

                directives=( map )
                directives_val=()
                check_directives=()
                check_args=( '["$ssl_preread_alpn_protocols","$proxy_pass"]' )

                NginxAddDirective 2

                directive_alpn_protocols='{"directive":"'"$alpn_protocols_directive"'","args":["'"$alpn_protocols_args"'"]}'

                directives=( "$alpn_protocols_directive" )
                directives_val=( alpn_protocols )
                check_directives=()
                check_args=()

                NginxAddDirective 3

                if [ "$updated" -eq 1 ] 
                then
                    NginxBuildConf parse_out
                fi
                Println "$info ALPN 协议分流添加成功\n"
            ;;
            6) 
                Println "分流后端:\n\n${nginx_stream_upstream_list:-无}\n\n"
                ExitOnText "输入指令(分流后端名称)" upstream_args

                Println "$tip 比如: 127.0.0.1:8888"
                ExitOnText "输入指令值(分流后端地址)" upstream_server_args

                directive_upstream='{"directive":"upstream","args":["'"$upstream_args"'"],"block":[]}'

                directives=( upstream )
                directives_val=()
                check_directives=()
                check_args=( '["'"$upstream_args"'"]' )

                NginxAddDirective 2

                if [ "$updated" -eq 0 ] 
                then
                    Println "$error 分流后端已经存在\n"
                    exit 1
                fi

                directive_upstream_server='{"directive":"server","args":["'"$upstream_server_args"'"]}'

                directives=( upstream_server )
                directives_val=()
                check_directives=()
                check_args=()

                NginxAddDirective 3
                NginxBuildConf parse_out

                Println "$info 分流后端添加成功\n"
            ;;
            7) 
                echo
                inquirer checkbox_input_indices "选择删除的 SNI 域名分流: " nginx_stream_server_name server_name_selected

                if [ -z "${server_name_selected:-}" ] 
                then
                    Println "$i18n_canceled...\n"
                    exit 1
                fi

                directive_map='{"directive":"map","args":["$ssl_preread_server_name","$upstream"],"block":[]}'

                directives=( map )
                directives_val=()
                check_directives=()
                check_args=( '["$ssl_preread_server_name","$upstream"]' )

                NginxAddDirective 2

                for((i=0;i<${#server_name_selected[@]};i++));
                do
                    jq_path='["config",0,"parsed",'"$level_1_index"',"block",'"${level_2_add_indices[0]}"',"block"]'
                    level_3_index=${server_name_selected[i]}
                    JQs delete parse_out $((level_3_index-i))
                    NginxGetConfig
                done

                NginxBuildConf parse_out
                Println "$info SNI 域名分流删除成功\n"
            ;;
            8) 
                echo
                inquirer checkbox_input_indices "选择删除的 SSL 协议分流: " nginx_stream_protocol protocol_selected

                if [ -z "${protocol_selected:-}" ] 
                then
                    Println "$i18n_canceled...\n"
                    exit 1
                fi

                directive_map='{"directive":"map","args":["$ssl_preread_protocol","$ssl_proxy"],"block":[]}'

                directives=( map )
                directives_val=()
                check_directives=()
                check_args=( '["$ssl_preread_protocol","$ssl_proxy"]' )

                NginxAddDirective 2

                for((i=0;i<${#protocol_selected[@]};i++));
                do
                    jq_path='["config",0,"parsed",'"$level_1_index"',"block",'"${level_2_add_indices[0]}"',"block"]'
                    level_3_index=${protocol_selected[i]}
                    JQs delete parse_out $((level_3_index-i))
                    NginxGetConfig
                done

                NginxBuildConf parse_out
                Println "$info SSL 协议分流删除成功\n"
            ;;
            9) 
                echo
                inquirer checkbox_input_indices "选择删除的 ALPN 协议分流: " nginx_stream_alpn_protocols alpn_protocols_selected

                if [ -z "${alpn_protocols_selected:-}" ] 
                then
                    Println "$i18n_canceled...\n"
                    exit 1
                fi

                directive_map='{"directive":"map","args":["$ssl_preread_alpn_protocols","$proxy_pass"],"block":[]}'

                directives=( map )
                directives_val=()
                check_directives=()
                check_args=( '["$ssl_preread_alpn_protocols","$proxy_pass"]' )

                NginxAddDirective 2

                for((i=0;i<${#alpn_protocols_selected[@]};i++));
                do
                    jq_path='["config",0,"parsed",'"$level_1_index"',"block",'"${level_2_add_indices[0]}"',"block"]'
                    level_3_index=${alpn_protocols_selected[i]}
                    JQs delete parse_out $((level_3_index-i))
                    NginxGetConfig
                done

                NginxBuildConf parse_out
                Println "$info ALPN 协议分流删除成功\n"
            ;;
            10) 
                echo
                inquirer checkbox_input_indices "选择删除的分流后端: " nginx_stream_upstream upstream_selected

                if [ -z "${upstream_selected:-}" ] 
                then
                    Println "$i18n_canceled...\n"
                    exit 1
                fi

                for((i=0;i<${#upstream_selected[@]};i++));
                do
                    jq_path='["config",0,"parsed",'"$level_1_index"',"block"]'
                    level_2_index=${upstream_selected[i]}
                    level_2_index=${nginx_stream_upstream_indices[level_2_index]}
                    JQs delete parse_out $((level_2_index-i))
                    NginxGetConfig
                done

                NginxBuildConf parse_out
                Println "$info 后端分流删除成功\n"
            ;;
        esac
    fi
}
