Include src/nginx/install_cert "$@"

Include src/nginx/view_status "$@"

Include src/nginx/toggle "$@"

Include src/nginx/restart "$@"

Include src/nginx/parse_config "$@"

Include src/nginx/get_config "$@"

Include src/nginx/list_domains "$@"

Include src/nginx/select_domain "$@"

Include src/nginx/list_domain "$@"

Include src/nginx/select_domain_server "$@"

Include src/nginx/config_domain "$@"

Include src/nginx/get_stream "$@"

Include src/nginx/list_stream "$@"

Include src/nginx/list_localhost "$@"

Include src/nginx/select_localhost_server "$@"

Include src/nginx/is_block_directive "$@"

Include src/nginx/input_args "$@"

Include src/nginx/add_directive "$@"

Include src/nginx/add_user "$@"

Include src/nginx/add_stream "$@"

Include src/nginx/add_http "$@"

Include src/nginx/add_rtmp "$@"

Include src/nginx/add_enabled "$@"

Include src/nginx/add_ssl "$@"

Include src/nginx/add_localhost "$@"

Include src/nginx/add_nodejs "$@"

Include src/nginx/add_cors "$@"

Include src/nginx/add_upstream_nodejs "$@"

Include src/nginx/add_flv "$@"

Include src/nginx/add_samesite_none "$@"

Include src/nginx/build_conf "$@"

Include src/nginx/check_localhost "$@"

Include src/nginx/config_directive "$@"

Include src/nginx/config_localhost "$@"

Include src/nginx/config_server "$@"

Include src/nginx/check_acme "$@"

Include src/nginx/update_cert "$@"

Include src/nginx/toggle_domain "$@"

Include src/nginx/delete_domain "$@"

Include src/nginx/delete_domain "$@"

Include src/nginx/rotate_log "$@"

Include src/nginx/update_ip "$@"

Include src/nginx/enable_domain "$@"

Include src/nginx/disable_domain "$@"

Include src/nginx/append_conf "$@"

Include src/nginx/add_domain "$@"

Include src/nginx/config_nodejs "$@"

Include src/nginx/menu_nodejs "$@"

Include src/nginx/menu_mongodb "$@"

NginxInstall()
{
    DepsCheck
    JQInstall >/dev/null
    Progress &
    progress_pid=$!

    trap '
        kill $progress_pid
        wait $progress_pid 2> /dev/null
    ' EXIT

    if [ "$dist" == "rpm" ] 
    then
        yum -y install gcc gcc-c++ make >/dev/null 2>&1
        # yum groupinstall 'Development Tools'
        timedatectl set-timezone Asia/Shanghai >/dev/null 2>&1
        systemctl restart crond >/dev/null 2>&1
    else
        timedatectl set-timezone Asia/Shanghai >/dev/null 2>&1
        systemctl restart cron >/dev/null 2>&1
        apt-get -y install debconf-utils >/dev/null 2>&1
        echo '* libraries/restart-without-asking boolean true' | debconf-set-selections
        apt-get -y install software-properties-common pkg-config libssl-dev libghc-zlib-dev libcurl4-gnutls-dev libexpat1-dev unzip build-essential gettext >/dev/null 2>&1
    fi

    echo -n "...40%..."

    cd ~
    if [ ! -d pcre-8.45 ] 
    then
        curl -s -L https://downloads.sourceforge.net/pcre/pcre/8.45/pcre-8.45.zip -o pcre-8.45.zip
        unzip pcre-8.45.zip >/dev/null 2>&1
    fi

    if [ ! -d zlib-1.2.11 ] 
    then
        curl -s -L https://www.zlib.net/zlib-1.2.11.tar.gz -o zlib-1.2.11.tar.gz
        tar xzf zlib-1.2.11.tar.gz
    fi

    while IFS= read -r line
    do
        if [[ $line == *"openssl-1."* ]] 
        then
            openssl_name=${line#*<a href=\"}
            openssl_name=${openssl_name%%.tar.gz*}
            break
        fi
    done < <(curl -s -L -H "User-Agent: $USER_AGENT_BROWSER" https://www.openssl.org/source/ 2> /dev/null)

    if [ ! -d "./$openssl_name" ] 
    then
        curl -s -L "https://www.openssl.org/source/$openssl_name.tar.gz" -o "$openssl_name.tar.gz"
        tar xzf "$openssl_name.tar.gz"
    fi

    rm -rf nginx-http-flv-module-master
    curl -s -L "$FFMPEG_MIRROR_LINK/nginx-http-flv-module.zip" -o nginx-http-flv-module.zip
    unzip nginx-http-flv-module.zip >/dev/null 2>&1

    cd nginx-http-flv-module-master
    curl -s -L "$FFMPEG_MIRROR_LINK/Add-SVT-HEVC-support-for-RTMP-and-HLS-on-Nginx-HTTP-FLV.patch" -o Add-SVT-HEVC-support-for-RTMP-and-HLS-on-Nginx-HTTP-FLV.patch
    patch -p1 < Add-SVT-HEVC-support-for-RTMP-and-HLS-on-Nginx-HTTP-FLV.patch >/dev/null 2>&1
    cd ~

    while IFS= read -r line
    do
        if [[ $line == *"/download/"* ]] 
        then
            nginx_package_name=${line#*/download/}
            nginx_package_name=${nginx_package_name%%.tar.gz*}
            break
        fi
    done < <(curl -s -Lm 20 -H "User-Agent: $USER_AGENT_BROWSER" https://nginx.org/en/download.html 2> /dev/null)

    if [ ! -d "./$nginx_package_name" ] 
    then
        curl -s -L "https://nginx.org/download/$nginx_package_name.tar.gz" -o "$nginx_package_name.tar.gz"
        tar xzf "$nginx_package_name.tar.gz"
    fi

    echo -n "...60%..."

    cd "$nginx_package_name/"
    ./configure --add-module=../nginx-http-flv-module-master \
        --with-pcre=../pcre-8.45 --with-pcre-jit --with-zlib=../zlib-1.2.11 \
        --with-openssl=../$openssl_name --with-openssl-opt=no-nextprotoneg \
        --with-http_stub_status_module --with-http_ssl_module --with-http_v2_module \
        --with-http_realip_module --with-threads --with-stream --with-stream_ssl_preread_module \
        --with-stream_ssl_module --with-stream_realip_module --with-debug >/dev/null 2>&1

    echo -n "...80%..."

    nproc="-j$(nproc 2> /dev/null)" || nproc="-j1"
    make $nproc >/dev/null 2>&1
    make install >/dev/null 2>&1

    kill $progress_pid
    wait $progress_pid 2> /dev/null || true
    trap - EXIT
    ln -sf /usr/local/nginx/sbin/nginx /usr/local/bin/
    echo "...100%"

    if ! grep -q "$nginx_name:" < "/etc/passwd"
    then
        if grep -q '\--group ' < <(adduser --help)
        then
            adduser "$nginx_name" --system --group --no-create-home > /dev/null
        else
            adduser "$nginx_name" --system --no-create-home > /dev/null
        fi
        usermod -s /usr/sbin/nologin "$nginx_name"
    fi

    sed -i "s/#user  nobody;/user $nginx_name $nginx_name;/" "$nginx_prefix/conf/nginx.conf"
    sed -i "s/worker_processes .*/worker_processes  ${nproc:2};/" "$nginx_prefix/conf/nginx.conf"
    sed -i "s/worker_connections  1024;/worker_connections  51200;/" "$nginx_prefix/conf/nginx.conf"

    mkdir -p "$nginx_prefix/conf/sites_crt/"
    mkdir -p "$nginx_prefix/conf/sites_available/"
    mkdir -p "$nginx_prefix/conf/sites_enabled/"
    mkdir -p "$nginx_prefix/html/localhost/"

    CrossplaneInstall
}

NginxUninstall()
{
    if [ ! -d "$nginx_prefix" ] 
    then
        Println "$error $nginx_name 未安装 !\n"
        exit 1
    fi

    echo
    ExitOnList n "`eval_gettext \"确定删除 \\\$nginx_name 包括所有配置文件, 操作不可恢复\"`"

    systemctl stop $nginx_name || true

    if [ "$nginx_ctl" == "or" ] 
    then
        rm -rf "${nginx_prefix%/*}"
    else
        rm -rf "$nginx_prefix"
    fi

    Println "$info $nginx_name 卸载完成\n"
}

NginxUpdate()
{
    ShFileUpdate "$nginx_name"

    if [ ! -d "$nginx_prefix" ] 
    then
        Println "$error $nginx_name 未安装 !\n"
        exit 1
    fi

    echo
    ExitOnList n "`eval_gettext \"是否重新编译 \\\$nginx_name\"`"

    nginx_name_upper=$(tr '[:lower:]' '[:upper:]' <<< "${nginx_name:0:1}")"${nginx_name:1}"
    "$nginx_name_upper"Install
    Println "$info $nginx_name 升级完成\n"
}

ShFileCheck

[ ! -d "$IPTV_ROOT" ] && JQ_FILE="/usr/local/bin/jq"

nginx_prefix="/usr/local/nginx"
nginx_name="nginx"
nginx_ctl="nx"
NGINX_FILE="$nginx_prefix/sbin/nginx"

if [ ! -s "/etc/systemd/system/$nginx_name.service" ] && [ -d "$nginx_prefix" ]
then
    ResourceLimit
    echo "[Unit]
Description=$nginx_name
After=syslog.target network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=forking
PIDFile=$nginx_prefix/logs/nginx.pid
ExecStartPre=$nginx_prefix/sbin/nginx -t
ExecStart=$nginx_prefix/sbin/nginx
ExecStartPost=/bin/sleep 0.1
ExecReload=$nginx_prefix/sbin/nginx -s reload
ExecStop=/bin/kill -s QUIT \$MAINPID
PrivateTmp=true
# file size
LimitFSIZE=infinity
# cpu time
LimitCPU=infinity
# virtual memory size
LimitAS=infinity
# open files
LimitNOFILE=$file_max
# processes/threads
LimitNPROC=64000
# locked memory
LimitMEMLOCK=infinity

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/$nginx_name.service
    $NGINX_FILE -s stop 2> /dev/null || true
    systemctl daemon-reload
    systemctl enable "$nginx_name"
    systemctl start "$nginx_name"
fi

Println "  nginx 管理面板 ${normal}${red}[v$sh_ver]${normal}

  ${green}1.${normal} 安装
  ${green}2.${normal} 卸载
  ${green}3.${normal} 升级
————————————
  ${green}4.${normal} 查看域名
  ${green}5.${normal} 添加域名
  ${green}6.${normal} 修改域名
  ${green}7.${normal} 开关域名
  ${green}8.${normal} 查看本地
  ${green}9.${normal} 修改本地
————————————
 ${green}10.${normal} 状态
 ${green}11.${normal} 开关
 ${green}12.${normal} 重启
————————————
 ${green}13.${normal} 配置 日志切割
 ${green}14.${normal} 配置 nodejs
 ${green}15.${normal} 配置 mongodb
 ${green}16.${normal} 配置 postfix
 ${green}17.${normal} 配置 mmproxy
 ${green}18.${normal} 配置 dnscrypt proxy
 ${green}19.${normal} 识别 cloudflare/ibm ip
 ${green}20.${normal} 删除域名

 $tip 输入: nx 打开面板

"
read -p "`gettext \"输入序号\"` [1-20]: " nginx_num
case "$nginx_num" in
    1) 
        if [ -d "$nginx_prefix" ] 
        then
            Println "$error nginx 已经存在 !\n" && exit 1
        fi

        echo
        ExitOnList n "`gettext \"因为是编译 nginx, 耗时会很长, 是否继续\"`"

        NginxInstall
        Println "$info nginx 安装完成\n"
    ;;
    2) 
        NginxUninstall
    ;;
    3) 
        NginxUpdate
    ;;
    4) 
        NginxListDomain
    ;;
    5) 
        NginxAddDomain
    ;;
    6) 
        NginxConfigDomain
    ;;
    7) 
        NginxToggleDomain
    ;;
    8) 
        NginxListLocalhost
        NginxListStream
    ;;
    9) 
        NginxConfigLocalhost
    ;;
    10) 
        NginxViewStatus
    ;;
    11) NginxToggle
    ;;
    12) 
        NginxRestart
    ;;
    13) 
        NginxLogRotate
    ;;
    14)
        NodejsMenu
    ;;
    15)
        MongodbMenu
    ;;
    16)
        Include src/nginx/config_postfix "$@"
    ;;
    17)
        Include src/nginx/config_mmproxy "$@"
    ;;
    18)
        Include src/nginx/config_dnscrypt "$@"
    ;;
    19)
        NginxUpdateIp
    ;;
    20)
        NginxDeleteDomain
    ;;
    *) Println "$error $i18n_input_correct_number [1-20]\n"
    ;;
esac

exit 0
