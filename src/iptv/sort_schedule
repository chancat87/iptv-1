SortChannelSchedules()
{
    IFS="${delimiters[1]}" read -ra chnl_schedules_start_time <<< "${chnls_schedule_start_time[chnls_index]}"
    IFS="${delimiters[1]}" read -ra chnl_schedules_end_time <<< "${chnls_schedule_end_time[chnls_index]}"
    IFS="${delimiters[1]}" read -ra chnl_schedules_loop <<< "${chnls_schedule_loop[chnls_index]}"
    IFS="${delimiters[1]}" read -ra chnl_schedules_auto_remove <<< "${chnls_schedule_auto_remove[chnls_index]}"
    IFS="${delimiters[1]}" read -ra chnl_schedules_hls_change <<< "${chnls_schedule_hls_change[chnls_index]}"
    IFS="${delimiters[1]}" read -ra chnl_schedules_hls_change_once <<< "${chnls_schedule_hls_change_once[chnls_index]}"
    IFS="${delimiters[1]}" read -ra chnl_schedules_status <<< "${chnls_schedule_status[chnls_index]}"

    chnl_schedules_count=${#chnl_schedules_status[@]}

    if [ "$chnl_schedules_count" -eq 1 ] 
    then
        Println "$error 频道 [ ${chnls_channel_name[chnls_index]} ] 计划只有一个"
        return 0
    fi

    chnl_schedules_if_null="${chnls_schedule_hls_change[chnls_index]//false/}"
    chnl_schedules_if_null="${chnl_schedules_if_null//true/}"

    IFS="${delimiters[1]}" read -ra chnl_schedules_channel_name <<< "${chnls_schedule_channel_name[chnls_index]:-$chnl_schedules_if_null}${delimiters[1]}"

    chnl_schedules_indices=("${!chnl_schedules_status[@]}")
    chnl_schedules_list="${indent_6}${dim_underlined}${chnls_channel_name[chnls_index]}${normal}\n\n"
    chnl_schedules_options=()

    for chnl_schedules_index in "${chnl_schedules_indices[@]}"
    do
        if [ "${chnl_schedules_status[chnl_schedules_index]}" -eq 0 ] 
        then
            chnl_schedule_status_list="${green}等待${normal}"
        elif [ "${chnl_schedules_status[chnl_schedules_index]}" -eq 1 ] 
        then
            chnl_schedule_status_list="${blue}进行${normal}"
        else
            chnl_schedule_status_list="${red}结束${normal}"
        fi
        if [ "${chnl_schedules_hls_change_once[chnl_schedules_index]}" = true ] 
        then
            chnl_schedule_hls_change_list="${green}一次${normal}"
        elif [ "${chnl_schedules_hls_change[chnl_schedules_index]}" = true ] 
        then
            chnl_schedule_hls_change_list="${green}是${normal}"
        else
            chnl_schedule_hls_change_list="${red}否${normal}"
        fi
        if [ "${chnl_schedules_loop[chnl_schedules_index]}" = true ] 
        then
            chnl_schedule_loop_list="${green}是${normal}"
        else
            chnl_schedule_loop_list="${red}否${normal}"
        fi
        if [ "${chnl_schedules_auto_remove[chnl_schedules_index]}" = true ] 
        then
            chnl_schedule_auto_remove_list="${green}是${normal}"
        else
            chnl_schedule_auto_remove_list="${red}否${normal}"
        fi
        if [ -n "${chnl_schedules_channel_name[chnl_schedules_index]}" ] 
        then
            chnl_schedule_channel_name_list="${indent_6}频道名称: ${blue}${chnl_schedules_channel_name[chnl_schedules_index]}${normal}\n"
        else
            chnl_schedule_channel_name_list=""
        fi
        chnl_schedules_options+=("计划$((chnl_schedules_index+1))")
        chnl_schedules_list="$chnl_schedules_list  ${green}$((chnl_schedules_index+1)).${normal}${indent_6}状态: $chnl_schedule_status_list${indent_20}防盗链: $chnl_schedule_hls_change_list\n${indent_6}循环: $chnl_schedule_loop_list${indent_20}自动清除: $chnl_schedule_auto_remove_list\n$chnl_schedule_channel_name_list${indent_6}开始时间: $(date +%c --date=@"${chnl_schedules_start_time[chnl_schedules_index]}")\n${indent_6}结束时间: $(date +%c --date=@"${chnl_schedules_end_time[chnl_schedules_index]}")\n\n"
    done

    Println "$chnl_schedules_list"

    echo
    inquirer sort_input_indices "排序计划" chnl_schedules_options chnl_schedules_indices

    new_schedules=()

    for chnl_schedules_index in "${chnl_schedules_indices[@]}"
    do
        new_schedule=$(
            $JQ_FILE -n --arg start_time "${chnl_schedules_start_time[chnl_schedules_index]}" \
                --arg end_time "${chnl_schedules_end_time[chnl_schedules_index]}" \
                --arg loop "${chnl_schedules_loop[chnl_schedules_index]}" \
                --arg auto_remove "${chnl_schedules_auto_remove[chnl_schedules_index]}" \
                --arg hls_change "${chnl_schedules_hls_change[chnl_schedules_index]}" \
                --arg hls_change_once "${chnl_schedules_hls_change_once[chnl_schedules_index]}" \
                --arg channel_name "${chnl_schedules_channel_name[chnl_schedules_index]}" \
                --arg status "${chnl_schedules_status[chnl_schedules_index]}" \
            '{
                start_time: $start_time | tonumber,
                end_time: $end_time | tonumber,
                loop: $loop | test("true"),
                auto_remove: $auto_remove | test("true"),
                hls_change: $hls_change | test("true"),
                hls_change_once: $hls_change_once | test("true"),
                channel_name: $channel_name,
                status: $status | tonumber
            }'
        )
        new_schedules+=("$new_schedule")
    done

    file=true
    file_json=true
    jq_path='["channels",'"$chnls_index"',"schedule"]'
    JQ update "$CHANNELS_FILE" new_schedules

    Println "$info 频道 [ ${chnls_channel_name[chnls_index]} ] 计划排序成功\n"
}

SortChannelsSchedule()
{
    ListChannelsSchedule

    if [ -z "$chnls_schedule_list" ] 
    then
        Println "$error 请先添加频道计划\n"
        exit 1
    fi

    echo -e "  ${green}$((chnls_count+1)).${normal}${indent_6}全部\n\n"

    echo "输入频道序号(多个频道用空格分隔 比如: 1 2 4-5)"
    while read -p "$i18n_default_cancel" chnls_num
    do
        if [ -z "$chnls_num" ] 
        then
            Println "$i18n_canceled...\n" && exit 1
        fi

        if [ "$chnls_num" == $((chnls_count+1)) ] 
        then
            for chnls_index in "${chnls_schedule_indices[@]}"
            do
                SortChannelSchedules
            done
            break
        fi

        IFS=" " read -ra chnls_num_arr <<< "$chnls_num"

        error_no=0
        for chnl_num in "${chnls_num_arr[@]}"
        do
            case "$chnl_num" in
                *"-"*)
                    chnl_num_start=${chnl_num%-*}
                    chnl_num_end=${chnl_num#*-}
                    if [[ $chnl_num_start == *[!0-9]* ]] || [[ $chnl_num_end == *[!0-9]* ]] || [ "$chnl_num_start" -eq 0 ] || [ "$chnl_num_end" -eq 0 ] || [ "$chnl_num_end" -gt "$chnls_count" ] || [ "$chnl_num_start" -ge "$chnl_num_end" ]
                    then
                        error_no=3
                        break
                    else
                        for((i=chnl_num_start-1;i<chnl_num_end;i++));
                        do
                            if [ -z "${chnls_schedule_status[i]}" ] 
                            then
                                error_no=3
                                break 2
                            fi
                        done
                    fi
                ;;
                *[!0-9]*)
                    error_no=1
                    break
                ;;
                *)
                    if [ "$chnl_num" -lt 1 ] || [ "$chnl_num" -gt "$chnls_count" ] || [ -z "${chnls_schedule_status[chnl_num-1]}" ]
                    then
                        error_no=2
                        break
                    fi
                ;;
            esac
        done

        case "$error_no" in
            1|2|3)
                Println "$error $i18n_input_correct_number\n"
            ;;
            *)
                for chnl_num in "${chnls_num_arr[@]}"
                do
                    if [[ $chnl_num =~ - ]] 
                    then
                        chnls_start=${chnl_num%-*}
                        chnls_end=${chnl_num#*-}
                        for((chnls_index=chnls_start-1;chnls_index<chnls_end;chnls_index++));
                        do
                            SortChannelSchedules
                        done
                    else
                        chnls_index=$((chnl_num-1))
                        SortChannelSchedules
                    fi
                done
                break
            ;;
        esac
    done
}
