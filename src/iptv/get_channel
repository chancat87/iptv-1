GetChannel()
{
    GetDefault

    if [ "$monitor" = false ] 
    then
        select_index="pid"
        select_json='{ "pid": '"$chnl_pid"' }'
    elif [ "${kind:-}" == "flv" ] 
    then
        select_index="flv_push_link"
        select_json='{ "flv_push_link": "'"$chnl_flv_push_link"'" }'
    else
        select_index="output_dir_name"
        select_json='{ "output_dir_name": "'"$output_dir_name"'" }'
    fi

    [ -z "${delimiters:-}" ] && delimiters=( $'\001' $'\002' $'\003' $'\004' $'\005' $'\006' )

    IFS=$'\002\t' read -r chnl_pid chnl_status chnl_stream_links_list chnl_live chnl_proxy chnl_xc_proxy \
    chnl_user_agent chnl_headers chnl_cookies chnl_output_dir_name chnl_playlist_name chnl_seg_dir_name \
    chnl_seg_name chnl_seg_length chnl_seg_count chnl_video_codec chnl_audio_codec chnl_video_audio_shift \
    chnl_draw_text chnl_quality chnl_bitrate chnl_resolution chnl_const chnl_encrypt chnl_encrypt_session \
    chnl_keyinfo_name chnl_key_name chnl_key_time chnl_input_flags chnl_output_flags chnl_channel_name \
    chnl_channel_time chnl_sync chnl_sync_file chnl_sync_index chnl_sync_pairs chnl_hls_end_list chnl_flv_status \
    chnl_flv_h265 chnl_flv_push_link chnl_flv_pull_link chnl_subtitle_name chnl_subtitle_language chnl_subtitle_default \
    chnl_subtitle_auto_select chnl_subtitle_map chnl_schedule_start_time chnl_schedule_end_time chnl_schedule_loop \
    chnl_schedule_auto_remove chnl_schedule_hls_change chnl_schedule_hls_change_once chnl_schedule_channel_name \
    chnl_schedule_status < <($JQ_FILE -c -r --arg select_index "$select_index" --argjson select_json "$select_json" '
    .channels[] | select(.[$select_index] == $select_json[$select_index]) as $channel |
    ($channel.subtitle // [] | if . == "" then [] else . end) as $subtitle |
    ($channel.schedule // [] | if . == "" then [] else . end) as $schedule |
    reduce ({pid,status,stream_link,live,proxy,xc_proxy,user_agent,headers,cookies,output_dir_name,
    playlist_name,seg_dir_name,seg_name,seg_length,seg_count,video_codec,audio_codec,video_audio_shift,
    draw_text,quality,bitrate,resolution,const,encrypt,encrypt_session,keyinfo_name,key_name,key_time,
    input_flags,output_flags,channel_name,channel_time,sync,sync_file,sync_index,sync_pairs,hls_end_list,
    flv_status,flv_h265,flv_push_link,flv_pull_link}|keys_unsorted[]) as $key ([];
        $channel[$key] as $val | if ($val|type == "array") then
            . + [($val | join("\u0001")) + "\u0002"]
        elif $val then
            . + [($val | tostring) + "\u0002"]
        else
            . + ["\u0002"]
        end
    ) + 
    [([$subtitle[]|.name|. + "\u0001"]|join("") + "\u0002")] +
    [([$subtitle[]|.language|. + "\u0001"]|join("") + "\u0002")] +
    [([$subtitle[]|.default // false|tostring|. + "\u0001"]|join("") + "\u0002")] +
    [([$subtitle[]|.auto_select // false|tostring|. + "\u0001"]|join("") + "\u0002")] +
    [([$subtitle[]|.map|tostring|. + "\u0001"]|join("") + "\u0002")] +
    [([$schedule[]|.start_time // 0|tostring|. + "\u0001"]|join("") + "\u0002")] +
    [([$schedule[]|.end_time // 0|tostring|. + "\u0001"]|join("") + "\u0002")] +
    [([$schedule[]|.loop // true|tostring|. + "\u0001"]|join("") + "\u0002")] +
    [([$schedule[]|.auto_remove // true|tostring|. + "\u0001"]|join("") + "\u0002")] +
    [([$schedule[]|.hls_change // true|tostring|. + "\u0001"]|join("") + "\u0002")] +
    [([$schedule[]|.hls_change_once // false|tostring|. + "\u0001"]|join("") + "\u0002")] +
    [([$schedule[]|.channel_name|. + "\u0001"]|join("") + "\u0002")] +
    [([$schedule[]|.status // 2|tostring|. + "\u0001"]|join("") + "\u0002")]
    |@tsv' "$CHANNELS_FILE")

    if [ -z "$chnl_pid" ] 
    then
        Println "$error $i18n_channel_try_again\n"
        MonitorErr "获取频道信息 $select_json"
        return 1
    fi

    IFS="${delimiters[0]}" read -ra chnl_stream_links <<< "$chnl_stream_links_list"

    if [ -z "${chnl_stream_links:-}" ] 
    then
        chnl_stream_links_count=0
        chnl_stream_link=""
    else
        chnl_stream_links_count=${#chnl_stream_links[@]}
        chnl_stream_link=${chnl_stream_links[0]:-}
    fi

    if [ -n "$chnl_proxy" ] && { [[ $chnl_stream_link =~ ^https?:// ]] || [[ ${chnl_stream_link##*|} =~ ^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$ ]]; }
    then
        chnl_proxy_command="-http_proxy $chnl_proxy"
    else
        chnl_proxy_command=""
    fi

    chnl_xc_proxy_ori="$chnl_xc_proxy"
    chnl_xc_proxy=""

    if [ -n "$chnl_xc_proxy_ori" ] && [[ $chnl_stream_link =~ ^([^|]+)|http ]]
    then
        XtreamCodesGetDomains
        for xc_domain in "${xtream_codes_domains[@]}"
        do
            if [ "$xc_domain" == "${BASH_REMATCH[1]}" ] 
            then
                chnl_xc_proxy="$chnl_xc_proxy_ori"
                break
            fi
        done
    fi

    while [[ $chnl_headers =~ \\\\ ]]
    do
        chnl_headers=${chnl_headers//\\\\/\\}
    done

    if [ -n "$chnl_headers" ] && [[ ! $chnl_headers =~ \\r\\n$ ]]
    then
        chnl_headers="$chnl_headers\r\n"
    fi

    chnl_output_dir_root="$LIVE_ROOT/$chnl_output_dir_name"

    chnl_seg_dir_path=""
    if [ -n "$chnl_seg_dir_name" ] 
    then
        chnl_seg_dir_path="$chnl_seg_dir_name/"
    fi

    v_or_a=${chnl_video_audio_shift%_*}

    if [ "$v_or_a" == "v" ] 
    then
        chnl_video_shift=${chnl_video_audio_shift#*_}
        chnl_audio_shift=""
    elif [ "$v_or_a" == "a" ] 
    then
        chnl_video_shift=""
        chnl_audio_shift=${chnl_video_audio_shift#*_}
    else
        chnl_video_shift=""
        chnl_audio_shift=""
    fi

    chnl_keyinfo_name=${chnl_keyinfo_name:-$(RandStr)}
}
